# move to data subfolder
setwd("../data")
# load libraries
library(dplyr)
library(tidyr)
library(readxl)
source("../code/helper_fncts.R")
# make sure i use dplyr lag
lag <- dplyr::lag
# load data
load("cleaned/A_Int_byyear_1947_1962.RData")
load("cleaned/A_Int_byyear_1963_1996.RData")
load("cleaned/A_Int_byyear_1997_2022.RData")
load("cleaned/code_crosswalk.RData")
exclude = code_crosswalk[67:nrow(code_crosswalk), ]
keep = subset(code_crosswalk, !(Code %in% exclude$Code))
load("raw/api_pull/price.RData")
output_price_data <- output_price_data_raw
output_price_data$Code <- output_price_data$Industry
output_price_data <- merge(output_price_data, keep)
output_price_data$year <- as.numeric(output_price_data$Year)
output_price_data$price <- as.numeric(output_price_data$DataValue)
output_price_data <- subset(output_price_data, select = c("year", "Code", "Industry Description", "price"))
II_price_data <- II_price_data_raw
II_price_data$Code <- II_price_data$Industry
II_price_data <- merge(II_price_data, keep)
II_price_data$year <- as.numeric(II_price_data$Year)
II_price_data$int_price <- as.numeric(II_price_data$DataValue)
II_price_data <- subset(II_price_data, select = c("year", "Code", "Industry Description", "int_price"))
View(II_price_data_raw)
View(II_price_data)
load("raw/api_pull/price.RData")
output_price_data <- output_price_data_raw
output_price_data$Code <- output_price_data$Industry
output_price_data <- merge(output_price_data, keep)
output_price_data$year <- as.numeric(output_price_data$Year)
output_price_data$price <- as.numeric(output_price_data$DataValue)
output_price_data <- subset(output_price_data, select = c("year", "Code", "Industry Description", "price"))
output_price_data$price <- as.numeric(output_price_data$price)
output_price_data$year <- as.numeric(output_price_data$year)
II_price_data <- II_price_data_raw
II_price_data$Code <- II_price_data$Industry
II_price_data <- merge(II_price_data, keep)
II_price_data$year <- as.numeric(II_price_data$Year)
II_price_data$int_price <- as.numeric(II_price_data$DataValue)
II_price_data <- subset(II_price_data, select = c("year", "Code", "Industry Description", "int_price"))
II_price_data$int_price <- as.numeric(II_price_data$int_price)
II_price_data$year <- as.numeric(II_price_data$year)
# temp_1997_2022 <- merge(price_BEA_long_1997_2022, int_price_BEA_long_1997_2022, by = c("Code", "year")) # EXCEL DOWNLOAD
temp_1997_2022 <- merge(output_price_data, II_price_data, by = c("Code", "year")) # API
View(temp_1997_2022)
66*27
expanded_prices_1997_2022 <- temp_1997_2022 %>%
# Create a unique identifier for each row before the join to preserve original rows
mutate(id = row_number()) %>%
# Cross join with price_BEA_long based on year to get every combination of Code and j (other Code) in the same year
full_join(price_BEA_long_1997_2022, by = "year", suffix = c("", "_j"), relationship = "many-to-many") %>%
# Remove the temporary id column
select(-id)
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/clean_api.R")
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/clean_api.R")
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
View(resid_data_1997_2023)
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
View(expanded_prices_1997_2023)
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/clean_api.R")
View(A_Int_byyear_1997_2023)
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
View(resid_data_1997_2023)
View(Adelta1_Int_byyear_1998_2023)
View(Adelta1_Int_long_1998_2023)
# resid data
resid_data_1997_2023 <- merge(Adelta1_Int_long_1998_2023, expanded_prices_1997_2023, by = c("Code", "j", "year", "Industry Description"))
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/make_residdata_1997-2023_api.R")
66*27
66*66*27
66*66*26
library(dplyr)
library(tidyr)
# load helper fncts
source("helper_fncts.R")
# load("../data/cleaned/resid_data_1997_2022.RData") # load non-api data
load("../data/cleaned/resid_data_1997_2023_api.RData") # load api data
# remove NaNs
resid_data_clean <- resid_data_1997_2023 %>%
filter(!is.na(delta_1) & !is.infinite(delta_1))
# generate industry_year factor
resid_data_clean$industry_year <- factor(paste(resid_data_clean$Code, resid_data_clean$year, sep = "_"))
library(dplyr)
library(tidyr)
# load helper fncts
source("helper_fncts.R")
# load("../data/cleaned/resid_data_1997_2022.RData") # load non-api data
load("../data/cleaned/resid_data_1997_2023_api.RData") # load api data
# remove NaNs
resid_data_clean <- resid_data_1997_2023 %>%
filter(!is.na(delta_1) & !is.infinite(delta_1))
# generate industry_year factor
resid_data_clean$industry_year <- factor(paste(resid_data_clean$Code, resid_data_clean$year, sep = "_"))
library(purrr)
library(fixest)
library(zoo)
# Example for delta_1
model_delta_1 <- feols(delta_1 ~ industry_year + delta_logPratio_1_II:industry_year + logPratio_1_II:industry_year, data = resid_data_clean)
# store residuals
resid_results <- resid_data_clean
resid_results$delta_1_resid <- model_delta_1$residuals
save(resid_results, model_delta_1, file = "../data/cleaned/resid_results_1997_2022.RData")
library(fixest)
# load residuals data
# load("../data/cleaned/resid_results_1997_2022.RData")
# set R2
r2_1 <- r2(model_delta_1)["r2"]
# overlapping histograms of delta and delta_resid
library(ggplot2)
library(gridExtra)
library(scales)
lab1 = "Original"
lab2 = "Residualized"
colors <- setNames(hue_pal()(2), c(lab1, lab2))
plot_data <- resid_results %>%
filter(!is.na(delta_1) & !is.na(delta_1_resid) & !is.infinite(delta_1) & !is.infinite(delta_1_resid))
# set delta_1/delta_1_resid/delta_5/delta_5_resid/delta_10/delta_10_resid to NA if < cutoff
cutoff <- 0.01
plot_data$delta_1[abs(plot_data$delta_1) < cutoff] <- NA
plot_data$delta_1_resid[abs(plot_data$delta_1_resid) < cutoff] <- NA
# Overlapping histograms for delta_1 and delta_1_resid using frequency
p1 <- ggplot(plot_data) +
geom_histogram(aes(x = delta_1, y = ..density.., fill = lab1), binwidth = 0.01, alpha = 0.5) +
geom_histogram(aes(x = delta_1_resid, y = ..density.., fill = lab2), binwidth = 0.01, alpha = 0.5) +
xlim(-2, 2) +
theme_minimal() +
scale_fill_manual(values = colors) +
labs(x = expression(~Delta*log(tilde(a[ij]))~ ", 1yr"), y = "", fill = "", caption = paste("R^2: ", round(r2_1, 2))) +
theme(text = element_text(family = "serif", size = 32), legend.position = "bottom")
# Display the plots
ggsave("../figures/histograms/A_Int_resid_hist_1yr.pdf", p1, width = 16, height = 9)
r2_1
library(lmtest)
library(sandwich)
library(texreg)
library(dplyr)
# load residuals data
# load("../data/cleaned/resid_results_1997_2022.RData")
# Load BEA Data, and clean it
load("../data/cleaned/BEA_ILPA_data.RData") # pre-cleaned in cleaning code
columns_to_abs <- c(
"delta_software_1", "delta_software_5", "delta_software_10",
"delta_it_1", "delta_it_5", "delta_it_10",
"delta_compq_1", "delta_compq_5", "delta_compq_10"
)
invisible(lapply(columns_to_abs, function(col) {
BEA_ILPA_data[[paste0("abs_", col)]] <<- abs(BEA_ILPA_data[[col]])
}))
# Subset to only include when all delta_As aren't missing (so 2007 on)
BEA_ILPA_data$year <- as.character(BEA_ILPA_data$year)
regression_data <- resid_results %>%
select(Code, year, delta_1, delta_1_resid, delta_logPratio_1_II)
# generate absolute values
regression_data$abs_delta_1 <- abs(regression_data$delta_1)
regression_data$abs_delta_1_resid <- abs(regression_data$delta_1_resid)
regression_data$abs_delta_logPratio_1 <- abs(regression_data$delta_logPratio_1)
# recover maximum by Code-year for abs_delta_1, abs_delta_1_resid, etc...
regression_data_sum <- regression_data %>%
group_by(Code, year) %>%
summarise(
sum_delta_1 = sum(abs_delta_1, na.rm = TRUE),
sum_delta_1_resid = sum(abs_delta_1_resid, na.rm = TRUE)
)
regression_data_sum <- merge(regression_data_sum, BEA_ILPA_data, by = c("Code", "year"))
# Define formulas for regression
formulas <- list(
sum_delta_1 ~ abs_delta_software_1 + factor(year) + factor(Code),
sum_delta_1_resid ~ abs_delta_software_1 + factor(year) + factor(Code),
sum_delta_1 ~ abs_delta_it_1 + factor(year) + factor(Code),
sum_delta_1_resid ~ abs_delta_it_1 + factor(year) + factor(Code),
sum_delta_1 ~ abs_delta_compq_1 + factor(year) + factor(Code),
sum_delta_1_resid ~ abs_delta_compq_1 + factor(year) + factor(Code)
)
formula_names <- c(
"sum_1_software_abs",
"sum_resid_1_software_abs",
"sum_1_it_abs",
"sum_resid_1_it_abs",
"sum_1_compq_abs",
"sum_resid_1_compq_abs"
)
results <- lapply(formulas, reg_wrapper, data = regression_data_sum)
names(results) <- formula_names
#######################
# Slides regression
#######################
coef_map <- list(
"abs_delta_software_1" = "Correlation",
"abs_delta_it_1" = "Correlation",
"abs_delta_compq_1" = "Correlation",
"abs_delta_software_5" = "Correlation",
"abs_delta_it_5" = "Correlation",
"abs_delta_compq_5" = "Correlation",
"abs_delta_software_10" = "Correlation",
"abs_delta_it_10" = "Correlation",
"abs_delta_compq_10" = "Correlation")
#######################
# OG regressions comparison
#######################
texreg(list(results[['sum_resid_1_software_abs']][[1]], results[['sum_resid_1_compq_abs']][[1]], results[['sum_resid_1_it_abs']][[1]]), override.se = list(results[['sum_resid_1_software_abs']][[2]], results[['sum_resid_1_compq_abs']][[2]], results[['sum_resid_1_it_abs']][[2]]), override.pvalues = list(results[['sum_resid_1_software_abs']][[3]], results[['sum_resid_1_compq_abs']][[3]], results[['sum_resid_1_it_abs']][[3]]), custom.coef.map = coef_map, custom.model.names = c("Software", "Computer", "IT"), include.rsquared = FALSE, include.adjrs = FALSE, stars = c(.1, .05, .01), table = FALSE, file = "../tables/og_resid_Int_mainresults_1yr.tex")
texreg(list(results[['sum_resid_1_software_abs']][[1]], results[['sum_resid_1_compq_abs']][[1]], results[['sum_resid_1_it_abs']][[1]]), override.se = list(results[['sum_resid_1_software_abs']][[2]], results[['sum_resid_1_compq_abs']][[2]], results[['sum_resid_1_it_abs']][[2]]), override.pvalues = list(results[['sum_resid_1_software_abs']][[3]], results[['sum_resid_1_compq_abs']][[3]], results[['sum_resid_1_it_abs']][[3]]), custom.coef.map = coef_map, custom.model.names = c("Software", "Computer", "IT"), include.rsquared = FALSE, include.adjrs = FALSE, stars = c(.1, .05, .01), table = FALSE)
library(ggplot2)
library(dplyr)
library(fixest)
library(xtable)
# load residuals data
# load("../data/cleaned/resid_results_1997_2022.RData")
# maybe worth thinking about including main effect of prices
# Extract coefficient names
coef_names <- names(coef(model_delta_1))
# Compute confidence intervals for logPratio_1:industry_year terms
intervals <- confint(model_delta_1, parm = grep(":logPratio_1", coef_names, value = TRUE))
# Convert the intervals to a data frame for plotting
intervals_df <- as.data.frame(intervals)
intervals_df$term <- rownames(intervals_df)
colnames(intervals_df) <- c("lower", "upper", "term")
# Check if 0 is within each interval
intervals_df$includes_zero <- intervals_df$lower <= 0 & intervals_df$upper >= 0
# Calculate the percentage of intervals that include 0
percent_include_zero <- mean(intervals_df$includes_zero)
# Plot the confidence intervals with vertical error bars
ggplot(intervals_df, aes(x = term, y = 0)) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = includes_zero), width = 0.2) +
geom_point(aes(y = (lower + upper) / 2, color = includes_zero)) +
labs(x = "Interaction terms",
y = "Confidence Interval",
color = "Includes Zero",
caption = paste("Percent overlapping: ", round(percent_include_zero, 2))) +
theme_minimal() +
theme(axis.text.x = element_blank(), text = element_text(family = "serif", size = 24), legend.position = "bottom")
ggsave("../figures/theory/elasticity_change_Int.pdf", width = 16, height = 9)
# comparing ests on theta vs delta_theta
coef_names <- names(coef(model_delta_1))
delta_theta <- as.data.frame(coef(model_delta_1)[grep(":logPratio_1", coef_names, value = TRUE)])
colnames(delta_theta) <- "delta_theta"
theta <- as.data.frame(coef(model_delta_1)[grep(":delta_logPratio_1", coef_names, value = TRUE)])
colnames(theta) <- "theta"
# make dataframe of first quartile, median, third quartile for delta_theta and theta
quartiles <- c(0.25, 0.5, 0.75)
delta_theta_quartiles <- as.data.frame(apply(delta_theta, 2, quantile, probs = quartiles))
theta_quartiles <- as.data.frame(apply(theta, 2, quantile, probs = quartiles))
merged_quartiles <- rbind(t(delta_theta_quartiles), t(theta_quartiles))
# round values to 2 decimal places
merged_quartiles <- round(merged_quartiles, 2)
rownames(merged_quartiles) <- c("$\\alpha_{it}$", "$\\beta_{it}$")
colnames(merged_quartiles) <- c("1st Quartile", "Median", "3rd Quartile")
# make latex table of merged_quartiles
merged_quartiles_table <- xtable(merged_quartiles, )
print(merged_quartiles_table, floating = FALSE, file = "../tables/elasticity_quartiles_Int.tex", sanitize.text.function=function(x){x})
resid_data_clean$industry <- factor(resid_data_clean$Code)
model_delta_1_alt <- feols(delta_1 ~ industry_year + delta_logPratio_1_II:industry, data = resid_data_clean)
resid_results_alt <- resid_data_clean
resid_results_alt$delta_1_resid <- model_delta_1_alt$residuals
# Extract coefficient names
coef_names <- names(coef(model_delta_1_alt))
# Extract coefficients for delta_logPratio_1_II: terms
estimates <- coef(model_delta_1_alt)[grep("delta_logPratio_1_II", coef_names)]
estimates <- as.data.frame(estimates)
estimates$term <- rownames(estimates)
# separate term in 2 terms by :
estimates$Code <- gsub("delta_logPratio_1_II:industry", "", estimates$term)
estimates$theta <- 1 - estimates$estimate
# merge m:1 with resid_results_alt
resid_results_alt <- merge(resid_results_alt, estimates, by = "Code")
resid_results_alt$delta_1_resid <- resid_results_alt$delta_1_resid/resid_results_alt$theta
# Compute confidence intervals for logPratio_1:industry_year terms
intervals <- confint(model_delta_1_alt, parm = grep("delta_logPratio_1_II", coef_names, value = TRUE))
# Convert the intervals to a data frame for plotting
intervals_df <- as.data.frame(intervals)
intervals_df$term <- rownames(intervals_df)
colnames(intervals_df) <- c("lower", "upper", "term")
intervals_df <- merge(intervals_df, estimates, by = "term")
# change all values in intervals_df to 1-value
intervals_df$upper_theta <- 1 - intervals_df$lower
intervals_df$lower_theta <- 1 - intervals_df$upper
intervals_df$theta <- 1 - intervals_df$estimate
# Check complements or substitutes
intervals_df$complements <- intervals_df$upper_theta < 1
intervals_df$substitutes <- intervals_df$lower_theta > 1
intervals_df$sub_zero <- intervals_df$theta > 0
# Calculate the percentage of intervals that include 0
percent_comp <- mean(intervals_df$complements)
percent_sub <- mean(intervals_df$substitutes)
# Plot the confidence intervals with vertical error bars
ggplot(intervals_df, aes(x = term, y = 0)) +
geom_errorbar(aes(ymin = lower_theta, ymax = upper_theta, color = sub_zero), width = 0.2) +
geom_point(aes(y = theta, color = sub_zero)) +
labs(x = expression(~theta[i]),
y = "Confidence Interval",
color = "Includes Zero") + theme_minimal() +
theme(axis.text.x = element_blank(), text = element_text(family = "serif", size = 24), legend.position = "none")
ggsave("../figures/theory/elasticity_est_Int.pdf", width = 16, height = 9)
library(lpirfs)
library(plm)
library(dplyr)
library(ggplot2)
source("helper_fncts.R")
# load residuals data
load("../data/cleaned/resid_results_1997_2022.RData")
# load BEA + Patents data
load("../data/cleaned/BEA_ILPA_data.RData")
load("../data/cleaned/patent_data_agg.RData")
load("../data/cleaned/summary_naics_crosswalk.RData")
# we have to use Code_patent, to account for multiple Codes mapping to some NAICS 3-digit
temp <- resid_results[, c("Code", "year", "delta_1", "delta_1_resid")]
temp <- merge(temp, summary_naics_crosswalk, by = "Code")
panel_data <- temp %>%
group_by(Code_patent, year) %>%
summarise(
sum_delta_1 = sum(abs(delta_1), na.rm = TRUE),
sum_delta_1_resid = sum(abs(delta_1_resid), na.rm = TRUE)
)
panel_data <- merge(panel_data, patent_data_agg, by = c("Code_patent", "year"), all.x = TRUE, all.y = FALSE)
panel_data <- panel_data[, c("Code_patent", "year", "sum_delta_1", "sum_delta_1_resid", "patents_xi_real", "patents_num", "patents_cites")]
# local projections
patents_lp_og <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_og_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
# plot and save
patents_lp_both <- graph_lp_both(patents_lp_og, patents_lp_resid)
patents_lp_both_alt <- graph_lp_both(patents_lp_og_alt, patents_lp_resid_alt)
patents_lp <- graph_lp_one(patents_lp_resid, "resid")
patents_lp_alt <- graph_lp_one(patents_lp_resid_alt, "resid")
ggsave("../figures/local_projections/patents_lp_Int_both.pdf", patents_lp_both, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_both_alt.pdf", patents_lp_both_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_alt.pdf", patents_lp_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int.pdf", patents_lp, width = 9, height = 9)
patents_lp
patents_lp_alt
patents_lp_both
patents_lp_both_alt
library(lpirfs)
library(plm)
library(dplyr)
library(lmtest)
# load BEA + Patents data
load("../data/cleaned/BEA_ILPA_data.RData")
load("../data/cleaned/patent_data_agg.RData")
load("../data/cleaned/summary_naics_crosswalk.RData")
# we have to use Code_patent, to account for multiple Codes mapping to some NAICS 3-digit
temp <- resid_results_alt[, c("Code", "year", "delta_1", "delta_1_resid")]
temp <- merge(temp, summary_naics_crosswalk, by = "Code")
panel_data_alt <- temp %>%
group_by(Code_patent, year) %>%
summarise(
sum_delta_1 = sum(abs(delta_1), na.rm = TRUE),
sum_delta_1_resid = sum(abs(delta_1_resid), na.rm = TRUE)
)
panel_data_alt <- merge(panel_data_alt, patent_data_agg, by = c("Code_patent", "year"), all.x = TRUE, all.y = FALSE)
panel_data_alt <- panel_data_alt[, c("Code_patent", "year", "sum_delta_1", "sum_delta_1_resid", "patents_xi_real", "patents_num", "patents_cites")]
# local projections
patents_lp_omega <- lp_lin_panel(panel_data_alt, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_omega_alt <- lp_lin_panel(panel_data_alt, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_omega <- graph_lp_one(patents_lp_omega, "resid")
patents_lp_omega_alt <- graph_lp_one(patents_lp_omega_alt, "resid")
ggsave("../figures/local_projections/patents_lp_Int_altResid.pdf", patents_lp_omega, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_altResid_alt.pdf", patents_lp_omega_alt, width = 16, height = 9)
#######################
# Regression
#######################
load("../data/cleaned/BEA_ILPA_data.RData") # pre-cleaned in cleaning code
columns_to_abs <- c(
"delta_software_1", "delta_software_5", "delta_software_10",
"delta_it_1", "delta_it_5", "delta_it_10",
"delta_compq_1", "delta_compq_5", "delta_compq_10"
)
invisible(lapply(columns_to_abs, function(col) {
BEA_ILPA_data[[paste0("abs_", col)]] <<- abs(BEA_ILPA_data[[col]])
}))
# Subset to only include when all delta_As aren't missing (so 2007 on)
BEA_ILPA_data$year <- as.character(BEA_ILPA_data$year)
regression_data <- resid_results_alt %>%
select(Code, year, delta_1, delta_1_resid, delta_logPratio_1_II)
# generate absolute values
regression_data$abs_delta_1 <- abs(regression_data$delta_1)
regression_data$abs_delta_1_resid <- abs(regression_data$delta_1_resid)
regression_data$abs_delta_logPratio_1 <- abs(regression_data$delta_logPratio_1)
# recover maximum by Code-year for abs_delta_1, abs_delta_1_resid, etc...
regression_data_sum <- regression_data %>%
group_by(Code, year) %>%
summarise(
sum_delta_1 = sum(abs_delta_1, na.rm = TRUE),
sum_delta_1_resid = sum(abs_delta_1_resid, na.rm = TRUE)
)
regression_data_sum <- merge(regression_data_sum, BEA_ILPA_data, by = c("Code", "year"))
# Define formulas for regression
formulas <- list(
sum_delta_1 ~ abs_delta_software_1,
sum_delta_1_resid ~ abs_delta_software_1,
sum_delta_1 ~ abs_delta_it_1,
sum_delta_1_resid ~ abs_delta_it_1,
sum_delta_1 ~ abs_delta_compq_1,
sum_delta_1_resid ~ abs_delta_compq_1
)
formula_names <- c(
"sum_1_software_abs",
"sum_resid_1_software_abs",
"sum_1_it_abs",
"sum_resid_1_it_abs",
"sum_1_compq_abs",
"sum_resid_1_compq_abs"
)
results <- lapply(formulas, reg_wrapper, data = regression_data_sum)
names(results) <- formula_names
#######################
# Slides regression
#######################
coef_map <- list(
"abs_delta_software_1" = "Correlation",
"abs_delta_it_1" = "Correlation",
"abs_delta_compq_1" = "Correlation",
"abs_delta_software_5" = "Correlation",
"abs_delta_it_5" = "Correlation",
"abs_delta_compq_5" = "Correlation",
"abs_delta_software_10" = "Correlation",
"abs_delta_it_10" = "Correlation",
"abs_delta_compq_10" = "Correlation")
#######################
# OG regressions comparison
#######################
texreg(list(results[['sum_resid_1_software_abs']][[1]], results[['sum_resid_1_compq_abs']][[1]], results[['sum_resid_1_it_abs']][[1]]), override.se = list(results[['sum_resid_1_software_abs']][[2]], results[['sum_resid_1_compq_abs']][[2]], results[['sum_resid_1_it_abs']][[2]]), override.pvalues = list(results[['sum_resid_1_software_abs']][[3]], results[['sum_resid_1_compq_abs']][[3]], results[['sum_resid_1_it_abs']][[3]]), custom.coef.map = coef_map, custom.model.names = c("Software", "Computer", "IT"), include.rsquared = FALSE, include.adjrs = FALSE, stars = c(.1, .05, .01), table = FALSE, file = "../tables/og_resid_Int_mainresults_1yr_altResid.tex")
patents_lp_omega
patents_lp_omega_alt
patents_lp_omega
library(lpirfs)
library(plm)
library(dplyr)
library(ggplot2)
source("helper_fncts.R")
# load residuals data
load("../data/cleaned/resid_results_1997_2022.RData")
# load BEA + Patents data
load("../data/cleaned/BEA_ILPA_data.RData")
load("../data/cleaned/patent_data_agg.RData")
load("../data/cleaned/summary_naics_crosswalk.RData")
# we have to use Code_patent, to account for multiple Codes mapping to some NAICS 3-digit
temp <- resid_results[, c("Code", "year", "delta_1", "delta_1_resid")]
temp <- merge(temp, summary_naics_crosswalk, by = "Code")
panel_data <- temp %>%
group_by(Code_patent, year) %>%
summarise(
sum_delta_1 = sum(abs(delta_1), na.rm = TRUE),
sum_delta_1_resid = sum(abs(delta_1_resid), na.rm = TRUE)
)
panel_data <- merge(panel_data, patent_data_agg, by = c("Code_patent", "year"), all.x = TRUE, all.y = FALSE)
panel_data <- panel_data[, c("Code_patent", "year", "sum_delta_1", "sum_delta_1_resid", "patents_xi_real", "patents_num", "patents_cites")]
# local projections
patents_lp_og <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_og_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
# plot and save
patents_lp_both <- graph_lp_both(patents_lp_og, patents_lp_resid)
patents_lp_both_alt <- graph_lp_both(patents_lp_og_alt, patents_lp_resid_alt)
patents_lp <- graph_lp_one(patents_lp_resid, "resid")
patents_lp_alt <- graph_lp_one(patents_lp_resid_alt, "resid")
ggsave("../figures/local_projections/patents_lp_Int_both.pdf", patents_lp_both, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_both_alt.pdf", patents_lp_both_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_alt.pdf", patents_lp_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int.pdf", patents_lp, width = 9, height = 9)
View(panel_data)
source("~/Library/CloudStorage/GoogleDrive-jacob.gosselin@u.northwestern.edu/My Drive/research_ideas/changing_network/code/clean_patents.R")
View(patent_data_agg)
library(lpirfs)
library(plm)
library(dplyr)
library(ggplot2)
source("helper_fncts.R")
# load residuals data
load("../data/cleaned/resid_results_1997_2022.RData")
# load BEA + Patents data
load("../data/cleaned/BEA_ILPA_data.RData")
load("../data/cleaned/patent_data_agg.RData")
load("../data/cleaned/summary_naics_crosswalk.RData")
# we have to use Code_patent, to account for multiple Codes mapping to some NAICS 3-digit
temp <- resid_results[, c("Code", "year", "delta_1", "delta_1_resid")]
temp <- merge(temp, summary_naics_crosswalk, by = "Code")
panel_data <- temp %>%
group_by(Code_patent, year) %>%
summarise(
sum_delta_1 = sum(abs(delta_1), na.rm = TRUE),
sum_delta_1_resid = sum(abs(delta_1_resid), na.rm = TRUE)
)
panel_data <- merge(panel_data, patent_data_agg, by = c("Code_patent", "year"), all.x = TRUE, all.y = FALSE)
panel_data <- panel_data[, c("Code_patent", "year", "sum_delta_1", "sum_delta_1_resid", "patents_xi_real", "patents_num", "patents_cites")]
# local projections
patents_lp_og <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_xi_real", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_og_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
patents_lp_resid_alt <- lp_lin_panel(panel_data, panel_model = "within", panel_effect = "twoways", robust_cov = "vcovHC", robust_cluster = "group", diff_shock = FALSE, endog_data = "sum_delta_1_resid", shock = "patents_cites", confint = 1.65, hor = 15, cumul_mult = FALSE)
# plot and save
patents_lp_both <- graph_lp_both(patents_lp_og, patents_lp_resid)
patents_lp_both_alt <- graph_lp_both(patents_lp_og_alt, patents_lp_resid_alt)
patents_lp <- graph_lp_one(patents_lp_resid, "resid")
patents_lp_alt <- graph_lp_one(patents_lp_resid_alt, "resid")
ggsave("../figures/local_projections/patents_lp_Int_both.pdf", patents_lp_both, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_both_alt.pdf", patents_lp_both_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int_alt.pdf", patents_lp_alt, width = 16, height = 9)
ggsave("../figures/local_projections/patents_lp_Int.pdf", patents_lp, width = 9, height = 9)
patents_lp
patents_lp_alt
patents_lp
